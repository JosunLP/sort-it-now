name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.label }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            label: Linux x86_64
            artifact_suffix: linux-x86_64
            archive_extension: tar.gz
          - os: windows-latest
            label: Windows x86_64
            artifact_suffix: windows-x86_64
            archive_extension: zip
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Determine version
        id: meta
        shell: bash
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VERSION="${GITHUB_REF_NAME}"
          else
            VERSION="snapshot-${GITHUB_SHA::7}"
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Build release binary
        run: cargo build --release

      - name: Package artifact (Linux)
        if: matrix.os == 'ubuntu-latest'
        env:
          VERSION: ${{ steps.meta.outputs.version }}
          SUFFIX: ${{ matrix.artifact_suffix }}
          EXT: ${{ matrix.archive_extension }}
        shell: bash
        run: |
          set -eux
          BUNDLE_DIR="sort-it-now-${VERSION}-${SUFFIX}"
          ARCHIVE_PATH="${BUNDLE_DIR}.${EXT}"
          mkdir -p "$BUNDLE_DIR"
          cp target/release/sort_it_now "$BUNDLE_DIR/"
          chmod +x "$BUNDLE_DIR/sort_it_now"
          cp README.md "$BUNDLE_DIR/"
          cp scripts/install-unix.sh "$BUNDLE_DIR/install.sh"
          chmod +x "$BUNDLE_DIR/install.sh"
          tar -czf "$ARCHIVE_PATH" "$BUNDLE_DIR"
          sha256sum "$ARCHIVE_PATH" > "$ARCHIVE_PATH.sha256"

      - name: Package artifact (Windows)
        if: matrix.os == 'windows-latest'
        env:
          VERSION: ${{ steps.meta.outputs.version }}
          SUFFIX: ${{ matrix.artifact_suffix }}
          EXT: ${{ matrix.archive_extension }}
        shell: pwsh
        run: |
          $bundleDir = "sort-it-now-$env:VERSION-$env:SUFFIX"
          $archivePath = "$bundleDir.$env:EXT"
          New-Item -ItemType Directory -Force -Path $bundleDir | Out-Null
          Copy-Item -Path "target\release\sort_it_now.exe" -Destination (Join-Path $bundleDir "sort_it_now.exe")
          Copy-Item -Path "README.md" -Destination (Join-Path $bundleDir "README.md")
          Copy-Item -Path "scripts\install-windows.ps1" -Destination (Join-Path $bundleDir "install.ps1")
          Compress-Archive -Path $bundleDir -DestinationPath $archivePath -Force
          Get-FileHash -Path $archivePath -Algorithm SHA256 | Select-Object -ExpandProperty Hash | Out-File -FilePath "$archivePath.sha256" -Encoding ASCII

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sort-it-now-${{ steps.meta.outputs.version }}-${{ matrix.artifact_suffix }}
          path: |
            sort-it-now-${{ steps.meta.outputs.version }}-${{ matrix.artifact_suffix }}.${{ matrix.archive_extension }}
            sort-it-now-${{ steps.meta.outputs.version }}-${{ matrix.artifact_suffix }}.${{ matrix.archive_extension }}.sha256

  publish:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Publish release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/**/*
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
